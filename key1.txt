Exercise 1.1: Moving around in Emacs
1. emacs exer1.html
2. C-s H T M L
3. C-s s c a Enter M-b
4. C-s s e l f Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
8. We can used M-b to go to the beginning of a word, C-e to go to the end of the line, and C-a to go to the beginning of the line, this is faster than using the arrow keys.
9. Used Emac commands.
10. C-x C-c

Exercise 1.2: Deleting text in Emacs
1. emacs exer2.html
2. M-g g 19 Enter C-k
3. C-s D E C-a C-k
4. C-s w i k i C-s M-h C-w
5. C-s < ! Enter C-b C-b M-z > C-n C-a C-@ C-} C-} C-w C-s < ! C-a C-k

Exercise 1.3: Inserting Text in Emacs
1. emacs exer3.html
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter y y Enter
3. M-< M-% U T F - 8 Enter U S - A C I I Enter y Enter
4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a M-z >
5. M-< C-s < / o Enter C-e C-o
6. C-x C-c y

Exercise 1.4: Other editing tasks in Emacs
1. cat exer2.html exer2.diff >exer4.html
2. emacs exer4.html
3. M-> C-r < ! C-a C-f C-@ C-e M-w C-r < / h t m l > C-r C-n C-y C-o
4. M-> C-r s h o u l d C-r C-a C-f C-@ M-e M-e M-w C-r < p > s h o u l d C-r C-r C-n C-o C-y C-a C-k C-p C-k               C-p C-f DEL C-p C-f DEL C-p C-f DEL C-p C-f DEL C-p C-p C-k
   M-> C-r < ! C-r C-r C-r C-@ M-e C-n M-w C-r < h 2 > S u b C-r C-n C-o C-y ENTER C-p C-f DEL C-p C-f DEL
   M-> C-r D E L E T E C-r C-r C-r C-a C-f C-@ C-e M-w C-r < h 2 > H o m e C-r C-n C-n C-y
   M-> C-r d i f f C-r C-a C-f C-@ C-e M-w C-r < h 2 > L a b C-n C-o C-n C-y
5. C-s - - - SP e x C-a C-@ M-> C-w
6. C-x u
7. C-@ C-r - - - SP e x Enter M-x c o m m e n t - r e g i o n Enter
8. M-< M-% < o l > Enter < o L > Enter !
   Replaced 7 occurrences
9. C-x C-c

Exercise 1.5: Doing commands in Emacs
1. M-x m - d i r Enter j u n k
2. C-x C-f j u n k / h e l l o . c Enter (Copied code from assignment and pasted)
3. M-x c o m p i l e Enter C-a C-k m a k e SP h e l l o Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5. C-SP M-> M-w C-x b k e y 1 . t x t Enter M-> C-y
   EOF on input

Exercise 1.6: Running Elisp code
1. C-x b Enter
2. m o s t - n e g a t i v e - f i x n u m C-j 
   Output: -2305843009213693952
   
   ( f o r m a t SP " % x " SP m o s t - n e g a t i v e - f i x n u m )
   Output: 2000000000000000   
   
   m o s t - p o s i t i v e - f i x n u m C-j
   Output: 2305843009213693951
   
   ( f o r m a t SP " % x " SP m o s t - p o s i t i v e - f i x n u m )
   Output: 1fffffffffffffff 
//Gives us boundaries of numerical representation 64bit 

3. ( r a n d o m " 2 0 4 - 9 7 1 - 3 3 3 " ) C-j
   Output: 112467452917741444

4. ( s e t q SP x SP ( r a n d o m ) ) C-j
   Output: -323180298798923167
   ( s e t q SP y SP ( r a n d o m ) ) C-j
   Output: 1617381769188874594

5. ( s e t q SP p SP ( * SP x SP y))
   Output: 1159424258206425634
   ( l o g a n d SP p SP m o s t - p o s i t i v e - f i x n u m )	
   Output: 1159424258206425634

6. The r is not mathematically correct as it should be negative, since a negative times a positive is negative

7. No, these nunbers are not truly ransomed as there is a boundary on how small a negative number can be, as well as how big a positive number can be. The computer also uses a seed and input to generate the random number, the same see can also limit our number from being truly random.

8. We know that we are working on a system of 64 bit architecture, the random function has a range from [-2^61, 2^61 -1]. If x and y are truly random, the probability that the product is mathematically incorrect is !P(x >= sqrt(2^61 -1) and y >= sqrt(2^61 -1))). This is generalizing that the integers are symmetrical and that int_min and int_max will vary at most by one. So we can conclude that the probability that x and y are both within the range [0, sqrt(2^61 -1)] is very small, therefore the probability of the product of such two integers being correct is close to 100%.